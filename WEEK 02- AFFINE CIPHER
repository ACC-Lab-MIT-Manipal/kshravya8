#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>

int CalcGCD(int alpha_key)
{
    int x;
    int temp1=alpha_key;
    int sizeofAlphabet=26;

    while(sizeofAlphabet!=0)
    {
        x=sizeofAlphabet;
        sizeofAlphabet=temp1%sizeofAlphabet;
        temp1=x;
    }
    return(temp1);
}
    //function that calculates the inverse of a for decryption
int CalcInverseA(int alpha_key)
{
    int i,MI;
    for(i=1;i<=alpha_key;i++)
    {
        MI=((i*26)+1);
        if(MI%alpha_key==0)
        {
            break;
        }
    }
    MI=MI/alpha_key;
    return(MI);
}
int main()
{
    //variables
    int option, alpha_key, beta_key, gcd, num_message[100], num_cipher[100], alphaInverse, i, j;
    char message[100];

    //welcome message and text collection as well as option choice for what to do with text
    printf("Welcome to group 18's affine cipher program\n");
    printf("Please enter a message or ciphertext:\n");
    gets(message);
    printf("Please chose one of the following:\n");
    printf("Type 1 for encryption\tType 2 for decryption\n");
    scanf("%d", &option);

    //ensuring a valid choice is made
    if (option > 3 || option < 1)
    {
        printf("Please enter a valid option\n");
        exit(0);
    }

    //converting entered string to Capital letters
    for(i=0,j=0;i<strlen(message);i++)
    {
        if(message[i]!=' ')
        {
            message[j]=toupper(message[i]);
            j++;
        }
        else
        {
            message[j]=' ';
            j++;
        }
    }
    message[j]='\0';
    printf("Entered value is: %s\n", message);

    //stores message as ascii
    for(i=0;i<strlen(message);i++)
    {
        if(message[i]!=' ')
            num_message[i]=message[i]-'A';
        else
            num_message[i]=-20;
    }



    //collection of keys and ensuring they adhere to conditions (both between 1 and 26 & alpha being co-prime with 26)
    printf("Enter Alpha key between 1 and 25\n");
    scanf("%d", &alpha_key);
    if(alpha_key<1 || alpha_key>25)
    {
        printf("Alpha should lie in between 1 and 25\nSorry Try again!\n");
        exit(0);
    }
    gcd=CalcGCD(alpha_key);
    if(gcd!=1)
    {
        printf("Alpha must be co-prime with 26: 1,3,5,7,9,11,15,17,19,21,23,25\n Sorry try again!\n");
        exit(0);
    }
    printf("Enter Beta key between 1 and 26\n");
    scanf("%d",&beta_key);
    if(beta_key<0 || beta_key>26)
    {
        printf("Beta should lie between 0 and 25\nSorry Try again !\n");
        exit(0);
    }

    //code for encryption
    if(option==1)
    {
        printf("Ciphertext is\n");
        for(i=0;i<strlen(message);i++)
        {
            if(num_message[i]!=-20)
            {
                num_cipher[i]=((alpha_key*num_message[i])+beta_key)%26;
                printf("%c",(num_cipher[i]+'A'));
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }

    //code for decryption decryption
    if(option==2)
    {
        alphaInverse=CalcInverseA(alpha_key);
        printf("Plaintext is\n");
        for(i=0;i<strlen(message);i++)
        {
            if(num_message[i]!=-20)
            {
                num_cipher[i]=(alphaInverse*(num_message[i]-beta_key))%26;
                if(num_cipher[i]<0)
                {
                    num_cipher[i]=num_cipher[i]+26;//To avoid negative numbers
                }
                printf("%c",(num_cipher[i]+'A'));
            }
            else
            {
                printf(" ");
            }
        }
        printf("\n");
    }
}
