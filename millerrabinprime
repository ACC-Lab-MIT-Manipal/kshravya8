#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>

// Function to calculate (a * b) % m
long long mod_multiply(long long a, long long b, long long m) {
    long long result = 0;
    a = a % m;
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result + a) % m;
        }
        a = (a * 2) % m;
        b /= 2;
    }
    return result;
}

// Function to perform modular exponentiation (a^b % m)
long long mod_exp(long long base, long long exponent, long long modulus) {
    if (modulus == 1) return 0;  // 0 is not prime
    long long result = 1;
    base = base % modulus;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = mod_multiply(result, base, modulus);
        }
        base = mod_multiply(base, base, modulus);
        exponent /= 2;
    }
    return result;
}

// Rabin-Miller primality test
bool is_prime_rabin_miller(long long n, int k) {
    if (n <= 1 || n == 4) return false;
    if (n <= 3) return true;

    // Find r and d such that n = 2^r * d + 1
    long long d = n - 1;
    while (d % 2 == 0) {
        d /= 2;
    }

    // Witness loop
    for (int i = 0; i < k; i++) {
        long long a = 2 + rand() % (n - 4);
        long long x = mod_exp(a, d, n);

        if (x == 1 || x == n - 1) continue;

        for (long long r = 1; r < n - 1; r *= 2) {
            x = mod_multiply(x, x, n);
            if (x == 1) return false;
            if (x == n - 1) break;
        }

        if (x != n - 1) return false;
    }

    return true;
}

int main() {
    long long num;
    int k = 5; // Number of iterations, higher values increase accuracy

    printf("Enter a number to check for primality: ");
    scanf("%lld", &num);

    if (is_prime_rabin_miller(num, k)) {
        printf("%lld is likely to be prime.\n", num);
    } else {
        printf("%lld is not prime.\n", num);
    }

    return 0;
}
